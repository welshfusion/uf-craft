{% import "_/includes/macros" as render %}

{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing
}) | raw %}
{% set delay = 0 %}

{% if eyebrow|length %}
<h6 class="block font-display text-base font-semibold {{ render.foregroundColors({background: backgroundColorLabel, type: 'heading'}) }} {{ render.getAlignment({alignment: contentAlignment, type: ['text']}) }}" {{ contentAnimation|raw }}>
    {{ render.replaceUnderscores({
        text: eyebrow,
    }) }}
</h6>
{% endif %}

{% if heading|length %}
{% set delay = delay + 200 %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}
<{{ headingTag }} class="font-display {{ headingSpacing|length ? headingSpacing : (eyebrow|length ? 'mt-6') }} {{ headingExtraClasses|length ? headingExtraClasses : 'tracking-tight [text-wrap:balance]' }} {{ render.getAlignment({alignment: contentAlignment, type: ['text']}) }} {{ render.getHeadingSize({headingTag: applyHeadingSize ?? headingTag}) }} {{ render.getFontWeight({font: fontWeight}) }} {{ render.foregroundColors({
    background: backgroundColorLabel,
    type: 'heading'
}) }}
" {{ contentAnimation|raw }}>
    {{ heading|nl2br }}
</{{ headingTag }}>
{% endif %}

{% if subHeading|length %}
<p class="block text-xl {{ heading|length or eyebrow|length ? 'mt-6' }} {{ render.foregroundColors({background: backgroundColorLabel, type: 'subHeading'}) }} {{ render.getAlignment({alignment: contentAlignment, type: ['text']}) }}" {{ contentAnimation|raw }}>
    {{ subHeading }}
</p>
{% endif %}

{% if text|length %}
{% set delay = delay + 200 %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}

<div class="{{ textParentDivClass|length ? textParentDivClass : 'space-y-6' }} {{ textSpacing|length ? textSpacing : (heading|length or eyebrow|length or subHeading|length ? 'mt-10') }} {{ render.getAlignment({alignment: contentAlignment, type: ['text']}) }}" {{ contentAnimation|raw }}>
    {{ render.replaceElements(text, {
        background: backgroundColorLabel,
        contentAlignment: contentAlignment,
        paragraphFontSize: overrideParagraphFontSize|length ? overrideParagraphFontSize
    }) }}
</div>
{% endif %}

{% for button in buttons %}
{% set delay = delay + 200 %}
{% set contentAnimation = render.setAnimation({
    animation: animation,
    animationStyle: contentAnimationStyle,
    animationDuration: contentAnimationDuration,
    animationOffset: contentAnimationOffset,
    animationEasing: contentAnimationEasing,
    animationDelay: delay
}) | raw %}
{% if loop.first %}
<div class="flex flex-wrap items-center gap-5 {{ (eyebrow|length or heading|length or text|length or subHeading|length) ? 'mt-5' }} {{ render.getAlignment({
    alignment: contentAlignment,
    type: 'justify'
}) }}" {{ contentAnimation|raw }}>
{% endif %}
    {{ render.createButton({
        button: button.button,
        buttonType: button.buttonType.getValue()|default(defaultButtonType|length ? defaultButtonType : "button"),
        buttonColor: button.buttonColor.label|default('cyprus'),
        icon: button.icon,
        iconPosition: button.iconPosition.getValue()|default('right'),
        background: backgroundColorLabel
    }) }}
{% if loop.last %}
</div>
{% endif %}
{% endfor %}