{#
===============================================================================
    Form (form)

    Variables
        - Block (block)

    Fields:
        Content:
            - Form (form)

        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)
===============================================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set form = block.form.one() %}
{% set contactInfo = block.contactInfo.type(null).all() %}

{% set contentWidth = block.contentWidth|default('2;10') %}
{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('bold') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}

{% set conbackgroundColor = conbackgroundColor ?? null %}
{% set backgroundColorLabel = block.backgroundColor.label|default(conbackgroundColor ?? 'white') %}
{% set containerBgExist = conbackgroundColor != backgroundColorLabel %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set contentAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle2.getValue()|default('fade-up'),
    animationDuration: block.animationDuration2.getValue()|default(1500),
    animationOffset: block.animationOffset2.getValue()|default(200),
    animationEasing: block.animationEasing2.getValue()|default(null)
}) | raw %}

{% set formAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle.getValue()|default('fade-up'),
    animationDuration: block.animationDuration.getValue()|default(1700),
    animationOffset: block.animationOffset.getValue()|default(400),
    animationEasing: block.animationEasing.getValue()|default(null)
}) | raw %}

<section id="{{ block.sectionId|length ? block.sectionId : 'block-' ~ block.getId() }}" class="{{ backgroundColor }} {{ spacing }}">
    <div class="container">
        <div class="mx-auto max-w-2xl lg:max-w-none">
        {% if block.eyebrow|length or block.heading|length or block.text|length %}
        {{ render.basicContents({
            eyebrow: block.eyebrow,
            heading: block.heading,
            text: block.text,
            headingTag: headingTag,
            fontWeight: fontWeight,
            backgroundColorLabel: backgroundColorLabel,
            animation: block.lightSwitch,
            contentAnimationStyle: block.animationStyle2.getValue()|default('fade-up'),
            contentAnimationDuration: block.animationDuration2.getValue()|default(1500),
            contentAnimationOffset: block.animationOffset2.getValue()|default(200),
            contentAnimationEasing: block.animationEasing2.getValue()|default(null)
        }) }}
        {% endif %}

        <div class="grid grid-cols-1 gap-x-8 gap-y-24 lg:grid-cols-2">
            <div class="lg:order-last" >
                {% if block.formHeading|length %}
                <h2 class="font-display text-base font-semibold {{ render.foregroundColors({background: backgroundColorLabel, type: 'heading'}) }}">
                    {{ block.formHeading }}
                </h2>
                {% endif %}

                <div class="isolate mt-6 -space-y-px rounded-2xl bg-white/50">
                    {% if form|length %}
                    <div {{ formAnimation|raw }}>
                        {{ craft.formie.renderForm(form) }}

                        {% js %}
                            document.addEventListener('onFormieInit', (event) => {
                                let Formie = event.detail.formie;
                                Formie.refreshForCache('{{ form.formId }}');
                            });
                        {% endjs %}
                    </div>
                    {% endif %}
                </div>
            </div>

            {% if block.sidebarHeading|length or block.text2|length or contactInfo|length %}
            <div {{ contentAnimation|raw }}>
                {% if block.sidebarHeading|length %}
                <h2 class="font-display text-base font-semibold {{ render.foregroundColors({background: backgroundColorLabel, type: 'heading'}) }}">
                    {{ block.sidebarHeading }}
                </h2>
                {% endif %}

                {% if block.text2|length %}
                <div class="mt-6 space-y-2.5">
                    {{ render.replaceElements(block.text2, {
                        background: backgroundColorLabel,
                    }) }}
                </div>
                {% endif %}

                {% if contactInfo|length %}
                <div class="{{ block.text2|length or block.sidebarHeading|length ? 'mt-10' }}">
                    {% for item in contactInfo %}
                    <div class="mt-16 pt-16 relative before:absolute after:absolute {{ backgroundColorLabel == 'green' ? 'before:bg-neutral-300' : 'before:bg-green-500' }} {{ backgroundColorLabel == 'black' ? 'after:bg-neutral-200' : 'after:bg-neutral-950/10' }} before:left-0 before:top-0 before:h-px before:w-6 after:left-8 after:right-0 after:top-0 after:h-px">
                        {% if item.heading|length %}
                            <h2 class="font-display text-base font-semibold {{ render.foregroundColors({background: backgroundColorLabel, type: 'heading'}) }}" {{ contentAnimation|raw }}>
                                {{ item.heading|nl2br }}
                            </h2>
                        {% endif %}

                        <div class='grid grid-cols-1 gap-8 text-sm sm:grid-cols-2'>
                            {% for block in item.contactCards.all() %}
                                {% include '_partials/pageBuilder/contactCards/' ~ block.type.handle ignore missing %}
                            {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% endif %}
            </div>
            {% endif %}
        </div>
    </div>
</section>