{#
=========================================================
    Container (container)

    Variables
        - Block (block)

    Fields:
        Content:
            Child:
              Container (container)

        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Container Size (containerSize)
            - Rounded Corners (roundedCorners)
            - Background Image (image)
            - Video (backgroundVideo)
            - Background Color (backgroundColor)
            - Overlay Opacity (overlayOpacity)
            - Content Alignment (contentAlignment)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
=========================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set containerSize = block.containerSize.getValue()|default('container') %}
{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('medium') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}
{% set contentWidth = block.contentWidth|default('2;10') %}
{% set overlayOpacity = block.overlayOpacity.getValue|default('60') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set containers = block.container.all() %}
{% set buttons = block.buttons.all() %}
{% set bgImage = block.image.one() %}
{% set videos = block.backgroundVideo ?? null %}

<section id="{{ block.sectionId|length ? block.sectionId : 'block-' ~ block.getId() }}" class="relative {{ backgroundColor }} {{ bgOpacity }} {{ containerSize == 'container' ? 'container' }} {{ block.roundedCorners ? 'rounded-4xl' }} {{ spacing }}">
    {% if bgImage|length or videos|length  %}
    {{ render.renderVideo({
        image: bgImage,
        alt: bgImage.title,
        width: bgImage.width,
        height: bgImage.height,
        class: "absolute inset-0 -z-10 h-full w-full object-cover rounded-4xl",
        lazy: false,
        videos: videos,
        videoClass: "absolute inset-0 -z-10 h-full w-full object-cover rounded-4xl",
        videoType: 'background',
        videoPoster: bgImage,
        videoAttrs: {
            preload: "none",
        }
    }) }}
    {% endif %}

    <div class="{{ containerSize == 'container' ? 'mx-auto max-w-4xl' : 'container' }}">
        <div class="{{ render.contentWidth({width: contentWidth}) }}">
            {% if block.eyebrow|length or block.heading|length or block.text|length %}
                {{ render.basicContents({
                    eyebrow: block.eyebrow,
                    heading: block.heading,
                    text: block.text,
                    headingTag: headingTag,
                    fontWeight: fontWeight,
                    backgroundColorLabel: backgroundColorLabel,
                }) }}
            {% endif %}

            {% include "_partials/blocks" with {
                pageBuilder: containers,
                parent: block.type.handle,
                conBackgroundImage: bgImage|length,
                childContainer: true,
                firstBlockSpacing: {
                    'defaultMarginTop' : 'none',
                },
                lastBlockSpacing: {
                    'defaultMarginBottom' : 'none',
                },
            } %}

            {% for button in buttons %}
                {% if loop.first %}
                <div class="flex flex-wrap items-center gap-5 mt-8 md:mt-10 {{ render.getAlignment({
                    alignment: contentAlignment,
                    type: 'justify'
                }) }}"
                >
                {% endif %}
                    {{ render.createButton({
                        button: button.button,
                        buttonType: button.buttonType.getValue()|default("button"),
                        buttonColor: button.buttonColor.label|default('cyprus'),
                        icon: button.icon,
                        iconPosition: button.iconPosition.getValue()|default('right'),
                        background: backgroundColorLabel,
                    }) }}
                {% if loop.last %}
                </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>
</section>