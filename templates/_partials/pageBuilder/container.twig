{#
=========================================================
    Container (container)

    Variables
        - Block (block)

    Fields:
        Content:
            Child:
              Container (container)

        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Sub Heading (subHeading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Container Size (containerSize)
            - Rounded Corners (roundedCorners)
            - Background Image (image)
            - Video (backgroundVideo)
            - Background Color (backgroundColor)
            - Overlay Opacity (overlayOpacity)
            - Content Alignment (contentAlignment)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
=========================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set image = block.image.one() %}
{% set video = block.backgroundVideo.all() %}

{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('medium') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}
{% set containerSize = block.containerSize.getValue()|default('container') %}
{% set contentWidth = block.contentWidth|default('2;10') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set overlayOpacity = block.overlayOpacity.getValue|default(image|length or video|length ? 0 : null) %}
{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set containers = block.container.all() %}
{% set buttons = block.buttons.all() %}

<section id="{{ block.sectionId|length ? block.sectionId : 'block-' ~ block.getId() }}" class="relative {{ image|length or video|length ? 'overflow-hidden' }} {{ block.roundedCorners ? 'rounded-4xl' }}">
    {% if image|length or video|length %}
    {{ render.renderVideo({
        image: image|length ? image,
        alt: image|length ? image.title,
        width: image|length ? image.width,
        height: image|length ? image.height,
        class: "absolute object-cover w-full h-full",
        lazy: false,
        videoLazy: false,
        videos: video,
        videoClass: "absolute object-cover w-full h-full",
        videoType: 'background',
        videoPoster: image,
        videoAttrs: {
            preload: "none",
        }
    }) }}
    {% endif %}
    <div class="absolute w-full h-full z-10 {{ backgroundColor }} {{ bgOpacity }} {{ block.roundedCorners ? 'rounded-4xl' }}"></div>

    <div class="{{ spacing }}">
        <div class="container {{ image|length or video|length ? 'relative z-10' }}">
            <div class="{{ render.contentWidth({width: contentWidth}) }}">
                {% if block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length %}
                <div class="relative z-20">
                    {{ render.basicContents({
                        eyebrow: block.eyebrow,
                        heading: block.heading,
                        subHeading: block.subHeading,
                        text: block.text,
                        headingTag: headingTag,
                        fontWeight: fontWeight,
                        backgroundColorLabel: backgroundColorLabel,
                    }) }}
                </div>
                {% endif %}

                <div class="{{ block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length ? 'mt-16' }}">
                    {% include "_partials/blocks" with {
                        pageBuilder: containers,
                        parent: block.type.handle,
                        conbackgroundColor: backgroundColorLabel,
                        conOverlayOpacity: overlayOpacity,
                        childContainer: true,
                        firstBlockSpacing: {
                            'defaultMarginTop' : 'none',
                        },
                        lastBlockSpacing: {
                            'defaultMarginBottom' : 'none',
                        },
                    } %}
                </div>

                {% for button in buttons %}
                    {% if loop.first %}
                    <div class="flex flex-wrap items-center gap-5 mt-8 md:mt-10 relative z-20 {{ render.getAlignment({
                        alignment: contentAlignment,
                        type: 'justify'
                    }) }}"
                    >
                    {% endif %}
                        {{ render.createButton({
                            button: button.button,
                            buttonType: button.buttonType.getValue()|default("button"),
                            buttonColor: button.buttonColor.label|default('cyprus'),
                            icon: button.icon,
                            iconPosition: button.iconPosition.getValue()|default('right'),
                            background: backgroundColorLabel,
                        }) }}
                    {% if loop.last %}
                    </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
    </div>
</section>