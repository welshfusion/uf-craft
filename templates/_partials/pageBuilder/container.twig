{#
=========================================================
    Container (container)

    Variables
        - Block (block)

    Fields:
        Content:
            Child:
              Container (container)
                - Basic Content  (basicContents)
                - Image (image)
                - Gallery (gallery)
                - Text Cards (textCards)
                - Banner Cards (bannerCards)
                - Tag (tag)
                - Multimedia (multimedia)
                - Form (form)

        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Sub Heading (subHeading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Rounded Corners (roundedCorners)
            - Background Image (image)
            - Video (backgroundVideo)
            - Background Color (backgroundColor)
            - Overlay Opacity (overlayOpacity)
            - Content Alignment (contentAlignment)
            - Show Pattern? (showPattern)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
=========================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set image = block.image.one() %}
{% set video = block.backgroundVideo.all() %}

{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('medium') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}
{% set containerSize = block.containerSize.getValue()|default('container') %}
{% set contentWidth = block.contentWidth|default('1;12') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set overlayOpacity = block.overlayOpacity.getValue|default(image|length or video|length ? 0 : 'none') %}
{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set containers = block.container.all() %}
{% set buttons = block.buttons.all() %}

<section id="{{ block.sectionId|length ? block.sectionId : 'block-' ~ block.getId() }}" class="relative {{ spacing.marginTop }} {{ spacing.marginBottom }} {{ block.roundedCorners ? 'rounded-4xl' }}">
    {% if image|length or video|length %}
    {{ render.renderVideo({
        image: image|length ? image,
        alt: image|length ? image.title,
        width: image|length ? image.width,
        height: image|length ? image.height,
        class: "absolute object-cover w-full h-full",
        lazy: false,
        videoLazy: false,
        videos: video,
        videoClass: "absolute object-cover w-full h-full",
        videoType: 'background',
        videoPoster: image,
        videoAttrs: {
            preload: "none",
        }
    }) }}
    {% endif %}
    <div class="absolute w-full h-full z-10 {{ backgroundColor }} {{ bgOpacity }} {{ block.roundedCorners ? 'rounded-4xl' }}"></div>

    <div class="{{ spacing.paddingTop }} {{ spacing.paddingBottom }}">
        {% if block.showPattern %}
        <svg aria-hidden="true" class="absolute inset-0 z-10 h-full w-full [mask-image:linear-gradient(to_bottom_left,white_50%,transparent_60%)] {{ render.foregroundColors({
            background: backgroundColorLabel,
            opacity: overlayOpacity,
            changeDefaultColor: true,
            type: 'pattern'
        }) }}">
            <rect width="100%" height="100%" fill="url(#:Rpbalkq:)" stroke-width="0"></rect>
            <svg x="50%" y="-256" stroke-width="0" class="overflow-visible">
                <path transform="translate(64 160)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
                <path transform="translate(128 320)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
                <path transform="translate(288 480)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
                <path transform="translate(512 320)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
                <path transform="translate(544 640)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
                <path transform="translate(320 800)" d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"></path>
            </svg>
            <defs>
                <pattern id=":Rpbalkq:" width="96" height="480" x="50%" patternUnits="userSpaceOnUse" patternTransform="translate(0 -256)" fill="none">
                    <path d="M128 0 98.572 147.138A16 16 0 0 1 82.883 160H13.117a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-45.117 320H-116M64-160 34.572-12.862A16 16 0 0 1 18.883 0h-69.766a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-109.117 160H-180M192 160l-29.428 147.138A15.999 15.999 0 0 1 146.883 320H77.117a16 16 0 0 0-15.69 12.862L34.573 467.138A16 16 0 0 1 18.883 480H-52M-136 480h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1-18.883 320h69.766a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 109.117 160H192M-72 640h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 45.117 480h69.766a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A15.999 15.999 0 0 1 173.117 320H256M-200 320h58.883a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A16 16 0 0 1-82.883 160h69.766a16 16 0 0 0 15.69-12.862L29.427 12.862A16 16 0 0 1 45.117 0H128"></path>
                </pattern>
            </defs>
        </svg>
        {% endif %}

        <div class="container {{ image|length or video|length ? 'relative z-10' }}">
            <div class="{{ render.contentWidth({width: contentWidth}) }}">
                {% if block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length %}
                <div class="relative z-20">
                    {{ render.basicContents({
                        eyebrow: block.eyebrow,
                        heading: block.heading,
                        subHeading: block.subHeading,
                        text: block.text,
                        headingTag: headingTag,
                        fontWeight: fontWeight,
                        contentAlignment: contentAlignment,
                        backgroundColorLabel: backgroundColorLabel,
                        opacity: overlayOpacity,
                    }) }}
                </div>
                {% endif %}

                <div class="{{ block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length ? 'mt-16' }}">
                    {% include "_partials/blocks" with {
                        pageBuilder: containers,
                        parent: block.type.handle,
                        conbackgroundColor: backgroundColorLabel,
                        conOverlayOpacity: overlayOpacity,
                        childContainer: true,
                        firstBlockSpacing: {
                            'defaultMarginTop' : 'none',
                        },
                        lastBlockSpacing: {
                            'defaultMarginBottom' : 'none',
                        },
                    } %}
                </div>

                {% for button in buttons %}
                {% if loop.first %}
                <div class="flex flex-wrap items-center gap-5 mt-8 md:mt-10 relative z-20 {{ render.getAlignment({
                    alignment: contentAlignment,
                    type: 'justify'
                }) }}"
                >
                {% endif %}
                    {{ render.createButton({
                        button: button.button,
                        buttonType: button.buttonType.getValue()|default("button"),
                        buttonColor: button.buttonColor.label|default('cyprus'),
                        icon: button.icon,
                        iconPosition: button.iconPosition.getValue()|default('right'),
                        background: backgroundColorLabel,
                    }) }}
                {% if loop.last %}
                </div>
                {% endif %}
                {% endfor %}
            </div>
        </div>
    </div>
</section>