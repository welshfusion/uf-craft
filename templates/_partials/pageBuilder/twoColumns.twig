{#
=========================================================
    Two Columns (twoColumns)

    Variables
        - Block (block)

    Fields:
        Content:
            Child:
              Columns (columns)
                - Basic Content  (basicContents)
                - Image (image)
                - Gallery (gallery)
                - Text Cards (textCards)
                - Tag (tag)
                - Multimedia (multimedia)
                - Form (form)

        Auxiliary:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Sub Heading (subHeading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Column Alignment (columnAlignment)
            - Two Column Layout (twoColumnLayout)
            - Background Color (backgroundColor)
            - Overlay Opacity (overlayOpacity)
            - Content Alignment (contentAlignment)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
=========================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{% set columnsWidth = block.twoColumnLayout.getValue()|default('6-6') %}
{% set columnAlignment = block.columnAlignment.getValue()|default('start') %}

{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('medium') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}
{% set contentWidth = block.contentWidth|default('0;12') %}

{% set backgroundColorLabel = block.backgroundColor.label|default('white') %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set overlayOpacity = block.overlayOpacity.getValue()|default('none') %}
{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set firstDiv = {
    '3-9' : 'md:col-start-1 md:col-end-4',
    '4-8' : 'md:col-start-1 md:col-end-5',
    '5-7' : 'md:col-start-1 md:col-end-6',
    '6-6' : 'md:col-start-1 md:col-end-7',
    '7-5' : 'md:col-start-1 md:col-end-8',
    '8-4' : 'md:col-start-1 md:col-end-9',
    '9-3' : 'md:col-start-1 md:col-end-10'
} %}

{% set lastDiv = {
    '3-9' : 'md:col-start-4 md:col-end-13',
    '4-8' : 'md:col-start-5 md:col-end-13',
    '5-7' : 'md:col-start-6 md:col-end-13',
    '6-6' : 'md:col-start-7 md:col-end-13',
    '7-5' : 'md:col-start-8 md:col-end-13',
    '8-4' : 'md:col-start-9 md:col-end-13',
    '9-3' : 'md:col-start-10 md:col-end-13'
} %}

{% set columns = block.twoColumns.all() %}
{% set buttons = block.buttons.all() %}

<section id="{{ block.sectionIds|length ? block.sectionIds : 'block-' ~ block.getId() }}" class="{{ backgroundColor }} {{ bgOpacity }} {{ spacing.implode(' ') }}">
    <div class="container">
        {% if block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length %}
        <div class="{{ render.contentWidth({width: contentWidth}) }}">
            {{ render.basicContents({
                eyebrow: block.eyebrow,
                heading: block.heading,
                subHeading: block.subHeading,
                text: block.text,
                headingTag: headingTag,
                fontWeight: fontWeight,
                backgroundColorLabel: backgroundColorLabel,
                opacity: overlayOpacity,
                contentAlignment: contentAlignment,
            }) }}
        </div>
        {% endif %}

        {% if columns|length %}
        <div class="grid grid-cols-1 md:grid-cols-12 gap-5 {{ block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length ? 'mt-10' }} {{ render.getAlignment({alignment: columnAlignment, type: 'items'}) }}">
            {% for child in columns %}
                <div class="{{ loop.first ? firstDiv[columnsWidth] : lastDiv[columnsWidth] }}">
                    {% include "_partials/blocks" with {
                        pageBuilder: child.column.all(),
                        parent: child.type.handle,
                        conbackgroundColor: backgroundColorLabel,
                        childContainer: true,
                        firstBlockSpacing: {
                            'defaultMarginTop' : 'none',
                        },
                        lastBlockSpacing: {
                            'defaultMarginBottom' : 'none',
                        },
                    } %}
                </div>
            {% endfor %}
        </div>
        {% endif %}

        {% for button in buttons %}
        {% if loop.first %}
        <div class="flex flex-wrap items-center gap-5 mt-8 md:mt-10 {{ render.getAlignment({
            alignment: contentAlignment,
            type: 'justify'
        }) }}"
        >
        {% endif %}
            {{ render.createButton({
                button: button.button,
                buttonType: button.buttonType.getValue()|default("button"),
                buttonColor: button.buttonColor.label|default('cyprus'),
                icon: button.icon,
                iconPosition: button.iconPosition.getValue()|default('right'),
                background: backgroundColorLabel,
            }) }}
        {% if loop.last %}
        </div>
        {% endif %}
        {% endfor %}
    </div>
</section>