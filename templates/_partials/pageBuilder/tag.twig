{#
===============================================================================
    Tag (tag)

    Variables
        - Block (block)

    Fields:
        Content:
            - Eyebrow (eyebrow)
            - Heading (heading)
            - Sub Heading (subHeading)
            - Text (text)
            - Buttons (buttons) [Matrix]
                - Button Type (buttonType)
                - Button Color (buttonColor)
                - Icon (icon)
                - Icon Position (iconPosition)
                - Button (button)

        Settings:
            - Content Width (contentWidth)
            - Background Color (backgroundColor)
            - Content Alignment (contentAlignment)
            - Heading Size (headingSize)
            - Font Weight (fontWeight)
===============================================================================
#}
{{ craft.app.config.general.devMode ? ('<!-- Template: ' ~ _self ~ ' -->') | raw }}
{% import "_/includes/macros" as render %}

{# Parent Block Fields Start #}
{% set parent = parent ?? null %}
{% set childContainer = childContainer ?? false %}
{% set sectionTag = childContainer ? 'div' : 'section' %}
{# Parent Block Fields End #}

{% set headingTag = block.headingSize.getValue()|default('h2') %}
{% set fontWeight = block.fontWeight.getValue()|default('medium') %}
{% set contentAlignment = block.contentAlignment.value|default('left') %}
{% set contentWidth = block.contentWidth|default('0;12') %}

{% set conbackgroundColor = conbackgroundColor ?? null %}
{% set backgroundColorLabel = block.backgroundColor.label|default(conbackgroundColor ?? 'none') %}
{% set containerBgExist = conbackgroundColor != backgroundColorLabel %}
{% set backgroundColor = render.color({
    handle: backgroundColorLabel,
    swatch: 'background'
}) %}

{% set overlayOpacity = block.overlayOpacity.getValue()|default('none') %}
{% set bgOpacity = render.setOpacity({
    opacity: overlayOpacity,
    opacityType: 'bg'
}) %}

{% set contentAnimation = render.setAnimation({
    animation: block.animation,
    animationStyle: block.animationStyle.value|default('fade-up'),
    animationDuration: block.animationDuration.value|default(1500),
    animationOffset: block.animationOffset.value|default(200),
    animationEasing: block.animationEasing.value|default(null)
}) | raw %}

{% set buttons = block.buttons.all() %}
{% set tags = block.tags.all() %}

<{{ sectionTag }} id="{{ block.sectionId|length ? block.sectionId : 'block-' ~ block.getId() }}" class="{{ containerBgExist ? backgroundColor ~ bgOpacity }} {{ childContainer ? 'relative z-20' }} {{ spacing }}">
    <div class="{{ not childContainer ? 'container' }} {{ childContainer and containerBgExist ? 'px-4 md:px-6' }}">
        <div class="{{ render.contentWidth({width: contentWidth}) }}">
            {% if block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length %}
            {{ render.basicContents({
                eyebrow: block.eyebrow,
                heading: block.heading,
                subHeading: block.subHeading,
                text: block.text,
                headingTag: headingTag,
                fontWeight: fontWeight,
                backgroundColorLabel: backgroundColorLabel,
                contentAlignment: contentAlignment,
                animation: block.animation,
                contentAnimationStyle: block.animationStyle.getValue()|default('fade-up'),
                contentAnimationDuration: block.animationDuration.getValue()|default(1500),
                contentAnimationOffset: block.animationOffset.getValue()|default(200),
                contentAnimationEasing: block.animationEasing.getValue()|default(null)
            }) }}
            {% endif %}

            {% if tags|length %}
            <ul role="list" class="flex flex-wrap gap-4 {{ block.eyebrow|length or block.heading|length or block.subHeading|length or block.text|length ? 'mt-10' }}" {{ contentAnimation|raw }}>
                {% for tag in tags %}
                    <li class="rounded-full bg-neutral-100 px-4 py-1.5 text-base text-neutral-600">
                        {{ tag.title }}
                    </li>
                {% endfor %}
            </ul>
            {% endif %}

            {% for button in buttons %}
            {% if loop.first %}
            <div class="flex flex-wrap items-center gap-5 mt-8 md:mt-10 {{ render.getAlignment({
                alignment: contentAlignment,
                type: 'justify'
            }) }}" {{ contentAnimation|raw }}>
            {% endif %}
                {{ render.createButton({
                    button: button.button,
                    buttonType: button.buttonType.getValue()|default("button"),
                    buttonColor: button.buttonColor.label|default('cyprus'),
                    icon: button.icon,
                    iconPosition: button.iconPosition.getValue()|default('right'),
                    background: backgroundColorLabel,
                }) }}
            {% if loop.last %}
            </div>
            {% endif %}
            {% endfor %}
        </div>
    </div>
</{{ sectionTag }}>